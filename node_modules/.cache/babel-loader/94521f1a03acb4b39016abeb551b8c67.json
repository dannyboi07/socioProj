{"ast":null,"code":"import _slicedToArray from\"/home/runner/work/socioProj/socioProj/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,Fragment,memo}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{useHistory,useParams,useLocation}from\"react-router-dom\";// import { getContacted, getMsgs } from '../../services/messageService';\nimport{clrMsging,getContactedRdx,getMsgsRdx,postMsgRdx}from\"../../reducers/messagingReducer\";// import FriendsCtn from '../FrndsCtn/FriendsCtn';\nimport Friend from\"../Friend/Friend\";import Profile from\"../Profile/Profile\";import Message from\"../Message/Message\";import\"./messaging.css\";import LoadingComp from\"../LoadingComp/LoadingComp\";import FailureComp from\"../FailureComp/FailureComp\";import{setNewChat}from\"../../reducers/fullScreenReducer\";import{setStatusNotif}from\"../../reducers/statusNotifReducer\";import{SecBgDiv}from\"../../styledComponents/SecBgDiv\";import{PrimBgDiv}from\"../../styledComponents/PrimBgDiv\";import{StyledInput}from\"../../styledComponents/StyledInput\";import StyledNewChatLink from\"../../styledComponents/NewChatLink\";import StyledMsgInput from\"../../styledComponents/StyledMsgInput\";import sendBlack from\"../../assets/send-b.svg\";import sendWhite from\"../../assets/send-w.svg\";import{Text}from\"../../styledComponents/Text\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function Messaging(){var dispatch=useDispatch();var history=useHistory();var params=useParams();var location=useLocation();var user=useSelector(function(state){return state.user;});var primCol=useSelector(function(state){var _state$theme;return(_state$theme=state.theme)===null||_state$theme===void 0?void 0:_state$theme.bgPrim;});// const actionCol = useSelector(state => state.theme?.action);\nvar messagingState=useSelector(function(state){return state.messaging;});var failureState=useSelector(function(state){var _state$failure;return((_state$failure=state.failure)===null||_state$failure===void 0?void 0:_state$failure.type)===\"MSGING\";});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),active=_useState2[0],setActive=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),curChat=_useState4[0],setCurChat=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),msgInput=_useState6[0],setMsgInput=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),filter=_useState8[0],setFilter=_useState8[1];var _useState9=useState([0,window.screen.width]),_useState10=_slicedToArray(_useState9,2),mobileSwitch=_useState10[0],setMobileSwitch=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),contrast=_useState12[0],setContrast=_useState12[1];useEffect(function(){dispatch(getContactedRdx(user.token));// First path option indicates that the new chat menu was open when this component was mounting,\n// second indicates that the user had opened a brand new chat with a contact,\n// I indicate that to the user by appending new/{friend's username}, and I remove either of the\n// paths if it exists on a page reload\nif(location.pathname.includes(\"/new\"||\"new/\")){history.replace(\"/messages\",[location.pathname]);}// Setting active state variable to an array of falses with the length as the number of friends\n// the user has chatted with already\nif(messagingState!==null&&messagingState!==void 0&&messagingState.contacted){var temp=[];for(var i=0;i<(messagingState===null||messagingState===void 0?void 0:messagingState.contacted.length);i++){temp.push(false);}setActive([].concat(temp));}return function(){return dispatch(clrMsging());};},[]);useEffect(function(){if(params.username&&(curChat===null||curChat===void 0?void 0:curChat.username)!==params.username){if(messagingState!==null&&messagingState!==void 0&&messagingState.contacted){var found=false;setActive(messagingState===null||messagingState===void 0?void 0:messagingState.contacted.map(function(act,i){if(!found&&params.username===(messagingState===null||messagingState===void 0?void 0:messagingState.contacted[i].username)){setCurChat(messagingState===null||messagingState===void 0?void 0:messagingState.contacted[i]);dispatch(getMsgsRdx(user.token,messagingState===null||messagingState===void 0?void 0:messagingState.contacted[i].u_id));found=true;return true;}else{if(i===messagingState.contacted.length-1&&!found){dispatch(setStatusNotif(\"SET_ERR_NOTIF\",\"Couldn't find contact in your chat history or friends list\",3));history.replace(\"/messages\",null);}return false;}}));}}else if(!params.username){setCurChat(null);setActive([]);}},[params,messagingState===null||messagingState===void 0?void 0:messagingState.contacted]);// , curChat\nuseEffect(function(){if(window.screen.width<768){if(params.username){setMobileSwitch([-1*window.screen.width,0]);}else setMobileSwitch([0,window.screen.width]);}},[params]);useEffect(function(){function darkerIcons(){var r=parseInt(primCol.substring(1,3),16);var g=parseInt(primCol.substring(3,5),16);var b=parseInt(primCol.substring(5,7),16);return r*0.299+g*0.587+b*0.114>100;}setContrast(darkerIcons());// Calling this as a bug fix cause when the theme is changed i.e global state theme primCol changes,\n// the Navbar is triggered to rerender, but the classes on settingsToggleRef & settingsRef don't reset,\n// since the classLists on stored on useRefs which don't change across renders aka in this case\n// the classes on the Refs don't change since useRefs stay the same across rerenders\n// but the toggle box collapses since the display state on it comes from a state variable\n// which when the Navbar rerenders goes back to the default declaration state of display: none\n},[primCol]);function handleMsgSubmit(){if(msgInput!==\"\"){dispatch(postMsgRdx(user.token,curChat.u_id,msgInput));setMsgInput(\"\");}}if(failureState){return/*#__PURE__*/_jsx(SecBgDiv,{className:\"dming-ctn-wrapper\",children:/*#__PURE__*/_jsx(PrimBgDiv,{className:\"dming-ctn\",children:/*#__PURE__*/_jsx(FailureComp,{})})});}if(!messagingState){return/*#__PURE__*/_jsx(SecBgDiv,{className:\"dming-ctn-wrapper\",children:/*#__PURE__*/_jsx(PrimBgDiv,{className:\"dming-ctn\",children:/*#__PURE__*/_jsx(LoadingComp,{})})});}if(window.screen.width<768){return/*#__PURE__*/_jsx(SecBgDiv,{className:\"dming-ctn-wrapper\",children:/*#__PURE__*/_jsxs(PrimBgDiv,{className:\"dming-ctn\",children:[/*#__PURE__*/_jsxs(\"div\",{style:{left:mobileSwitch[0]},className:\"frnds-ctn\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"new-chat\",children:/*#__PURE__*/_jsx(StyledNewChatLink,{to:\"/messages/new\",onClick:function onClick(){return dispatch(setNewChat());},children:\"New Chat\"})}),/*#__PURE__*/_jsx(StyledInput,{type:\"text\",value:filter,onChange:function onChange(e){return setFilter(e.target.value.toLowerCase());},placeholder:\"Search...\"}),filter!==\"\"?messagingState===null||messagingState===void 0?void 0:messagingState.contacted.map(function(friend,i){if(friend.name.toLowerCase().includes(filter)||friend.username.toLowerCase().includes(filter)){return/*#__PURE__*/_jsx(Friend,{active:active[i],onClick:active[i]?null:function(){return history.push(\"/messages/\".concat(friend.username));},username:friend.username,name:friend.name,imgloc:friend.imgloc},friend.u_id);}}):messagingState===null||messagingState===void 0?void 0:messagingState.contacted.map(function(friend,i){return/*#__PURE__*/_jsx(Friend,{active:active[i],onClick:active[i]?null:function(){return history.push(\"/messages/\".concat(friend.username));},username:friend.username,name:friend.name,imgloc:friend.imgloc},friend.u_id);})]}),/*#__PURE__*/_jsxs(\"div\",{style:{left:mobileSwitch[1]},className:\"dm-ctn\",children:[curChat&&/*#__PURE__*/_jsxs(\"div\",{className:\"dm-ctn__prof\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/back-arrow.svg\",alt:\"Back\",onClick:function onClick(){return history.replace(\"/messages\",null);}}),/*#__PURE__*/_jsx(Profile,{name:curChat.name,username:curChat.username,profImgSrc:curChat.imgloc})]}),/*#__PURE__*/_jsx(\"div\",{className:\"dms-ctn \".concat(curChat?\"dms-ctn--active\":\"\"),children:curChat?/*#__PURE__*/_jsx(_Fragment,{children:messagingState===null||messagingState===void 0?void 0:messagingState.messages.map(function(message,i){return i===messagingState.messages.length-1?/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Message,{uId:user.uId,uIdFrom:message.u_id_from,msgText:message.msg_text,time:message.time}),/*#__PURE__*/_jsx(\"p\",{className:\"dm-sction-date\",children:message.date})]},message.msg_id):messagingState.messages[i+1].date===message.date?/*#__PURE__*/_jsx(Message,{uId:user.uId,uIdFrom:message.u_id_from,msgText:message.msg_text,time:message.time},message.msg_id):/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Message,{uId:user.uId,uIdFrom:message.u_id_from,msgText:message.msg_text,time:message.time}),/*#__PURE__*/_jsx(\"p\",{className:\"dm-sction-date\",children:message.date})]},message.msg_id);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Select a chat\"})}),curChat&&/*#__PURE__*/_jsxs(PrimBgDiv,{className:\"dm-inpt-ctn\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"msg-input\",value:msgInput,onChange:function onChange(e){return setMsgInput(e.target.value);},placeholder:\"Message...\"}),/*#__PURE__*/_jsx(\"button\",{className:\"send-dm-btn \".concat(msgInput===\"\"?\"dm-btn-disb\":\"\"),onClick:handleMsgSubmit,title:\"Send Message\",children:contrast?/*#__PURE__*/_jsx(\"img\",{src:sendBlack,alt:\"Send\"}):/*#__PURE__*/_jsx(\"img\",{src:sendWhite,alt:\"Send\"})})]})]})]})});}// messagingState.messages.forEach(message => {\n//     const odate = new Date(message.date_time);\n//     console.log(odate.toString().split(\" \"));\n// });\n// function isSameDay(d1, d2) {\n//     return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n// }\nreturn/*#__PURE__*/_jsx(SecBgDiv,{className:\"dming-ctn-wrapper\",children:/*#__PURE__*/_jsxs(PrimBgDiv,{className:\"dming-ctn\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"frnds-ctn\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"new-chat\",children:/*#__PURE__*/_jsx(StyledNewChatLink,{to:\"/messages/new\",onClick:function onClick(){return dispatch(setNewChat());},children:\"New Chat\"})}),/*#__PURE__*/_jsx(StyledInput,{type:\"text\",value:filter,onChange:function onChange(e){return setFilter(e.target.value.toLowerCase());},placeholder:\"Search...\"}),filter!==\"\"?messagingState===null||messagingState===void 0?void 0:messagingState.contacted.map(function(friend,i){if(friend.name.toLowerCase().includes(filter)||friend.username.toLowerCase().includes(filter)){return/*#__PURE__*/_jsx(Friend,{active:active[i],onClick:active[i]?null:function(){return history.push(\"/messages/\".concat(friend.username));},username:friend.username,name:friend.name,imgloc:friend.imgloc},friend.u_id);}}):messagingState===null||messagingState===void 0?void 0:messagingState.contacted.map(function(friend,i){return/*#__PURE__*/_jsx(Friend,{active:active[i],onClick:active[i]?null:function(){return history.push(\"/messages/\".concat(friend.username));},username:friend.username,name:friend.name,imgloc:friend.imgloc},friend.u_id);})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dm-ctn\",children:[curChat&&/*#__PURE__*/_jsx(Profile,{name:curChat.name,username:curChat.username,profImgSrc:curChat.imgloc}),/*#__PURE__*/_jsx(\"div\",{className:\"dms-ctn \".concat(curChat?\"dms-ctn--active\":\"\"),children:curChat?/*#__PURE__*/_jsx(_Fragment,{children:messagingState===null||messagingState===void 0?void 0:messagingState.messages.map(function(message,i){return i===messagingState.messages.length-1?/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Message,{uId:user.uId,uIdFrom:message.u_id_from,msgText:message.msg_text,time:message.time}),/*#__PURE__*/_jsx(\"p\",{className:\"dm-sction-date\",children:message.date})]},message.msg_id):messagingState.messages[i+1].date===message.date?/*#__PURE__*/_jsx(Message,{uId:user.uId,uIdFrom:message.u_id_from,msgText:message.msg_text,time:message.time},message.msg_id):/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Message,{uId:user.uId,uIdFrom:message.u_id_from,msgText:message.msg_text,time:message.time}),/*#__PURE__*/_jsx(\"p\",{className:\"dm-sction-date\",children:message.date})]},message.msg_id);})}):/*#__PURE__*/_jsx(Text,{children:\"Select a chat\"})}),curChat&&/*#__PURE__*/_jsxs(PrimBgDiv,{className:\"dm-inpt-ctn\",children:[/*#__PURE__*/_jsx(StyledMsgInput,{type:\"text\",name:\"msg-input\",value:msgInput,onChange:function onChange(e){return setMsgInput(e.target.value);},placeholder:\"Message...\"}),/*#__PURE__*/_jsx(\"button\",{className:\"send-dm-btn \".concat(msgInput===\"\"?\"dm-btn-disb\":\"\"),onClick:handleMsgSubmit,title:\"Send Message\",children:contrast?/*#__PURE__*/_jsx(\"img\",{src:sendBlack,alt:\"Send\"}):/*#__PURE__*/_jsx(\"img\",{src:sendWhite,alt:\"Send\"})})]})]})]})});}export default/*#__PURE__*/memo(Messaging);//const contacted = useSelector(state => state.messaging?.contacted);\n//const messages = useSelector(state => state.messaging?.messages);\n// const [contacted, setContacted] = useState(null);\n// const [chatSectionDate, setChatSectionDate] = useState({ date: null, display: false });\n// const chatSectionDate = useRef({ date: null, display: false })\n// const [chatDateState, setChatDateState] = useState([]);\n// const chatSectionDateRef = useRef(null);\n// useEffect(() => {\n//     const temp = [];\n//     if (messagingState?.messages) {\n//         let dateCheck = null;\n//         for (let i = 0; i < messagingState.messages.length; i++) {\n//             let tempDate = new Date(messagingState.messages[i].date).toLocaleString(\"default\", {\n//                 dateStyle: \"full\"\n//             }).split(\" \").slice(1).join(\" \");\n//             if (tempDate !== dateCheck) {\n//                 temp.push(tempDate);\n//                 dateCheck = tempDate;\n//             };\n//             //console.log(tempDate, dateCheck);\n//         }\n//         //console.log(temp);\n//         setChatDateState([ ...temp ]);\n//     };\n// }, [messagingState?.messages]);\n// messagingState.messages[i].date === message.date ?\n//                                         <Message\n//                                         key={ message.msg_id }\n//                                         uId={ user.uId }\n//                                         message={ message }\n//                                         />\n//                                     :   <>\n//                                         {\n//                                             <p\n//                                             key={ message.msg_id+1 }\n//                                             className=\"dm-sction-date\">\n//                                                 { message.date }\n//                                             </p>\n//                                         }\n//                                             <Message\n//                                             key={ message.msg_id }\n//                                             uId={ user.uId }\n//                                             message={ message }\n//                                             />\n//                                         </>\n// messagingState?.messages.map((message, i) =>\n//     <>\n//         {\n//             chatSectionDate.display &&\n//                 <p key={i} className=\"dm-sction-date\">\n//                     { chatSectionDateRef.current }\n//                 </p>\n//         }\n//         <Message\n//         key={ message.msg_id }\n//         uId={ user.uId }\n//         message={ message }\n//         chatSectionDate={ chatSectionDate }\n//         setChatSectionDate={ setChatSectionDate }\n//         chatSectionDateRef={ chatSectionDateRef }\n//         />\n//     </>\n// )\n// chatDateState.map((chatDate, i) =>\n//                                 <>\n//                                     {\n//                                         <p key={i} className=\"dm-sction-date\">\n//                                             { chatDate }\n//                                         </p>\n//                                     }\n//                                     {\n//                                         messagingState?.messages.map(message =>\n//                                             <Message\n//                                             key={ message.msg_id }\n//                                             uId={ user.uId }\n//                                             message={ message }\n//                                             chatSectionDate={ chatSectionDate }\n//                                             setChatSectionDate={ setChatSectionDate }\n//                                             chatSectionDateRef={ chatSectionDateRef }\n//                                             />)\n//                                     }\n//                                 </>\n//                             )\n// function activeOnClick(fndUname) {\n//     setActive(messagingState?.contacted.map((act, i) => {\n//         if (fndUname === messagingState?.contacted[i].username) {\n//             setCurChat(messagingState?.contacted[i]);\n//             return true;\n//         } else {\n//             return false;\n//         };\n//     }));\n// };\n//console.log(messagingState);\n//console.log(messagingState?.messages);","map":{"version":3,"sources":["/home/runner/work/socioProj/socioProj/src/components/Messaging/Messaging.js"],"names":["React","useState","useEffect","Fragment","memo","useSelector","useDispatch","useHistory","useParams","useLocation","clrMsging","getContactedRdx","getMsgsRdx","postMsgRdx","Friend","Profile","Message","LoadingComp","FailureComp","setNewChat","setStatusNotif","SecBgDiv","PrimBgDiv","StyledInput","StyledNewChatLink","StyledMsgInput","sendBlack","sendWhite","Text","Messaging","dispatch","history","params","location","user","state","primCol","theme","bgPrim","messagingState","messaging","failureState","failure","type","active","setActive","curChat","setCurChat","msgInput","setMsgInput","filter","setFilter","window","screen","width","mobileSwitch","setMobileSwitch","contrast","setContrast","token","pathname","includes","replace","contacted","temp","i","length","push","username","found","map","act","u_id","darkerIcons","r","parseInt","substring","g","b","handleMsgSubmit","left","e","target","value","toLowerCase","friend","name","imgloc","messages","message","uId","u_id_from","msg_text","time","date","msg_id"],"mappings":"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C,GAAG,CAAE7D,IAAI,CAACwD,GADX,CAEC,OAAO,CAAED,OAAO,CAACE,SAFlB,CAGC,OAAO,CAAEF,OAAO,CAACG,QAHlB,CAIC,IAAI,CAAEH,OAAO,CAACI,IAJf,EADD,cAQE,UAAG,SAAS,CAAC,gBAAb,UACEJ,OAAO,CAACK,IADV,EARF,GAAeL,OAAO,CAACM,MAAvB,CAzB2B,EAA7B,CADF,EADO,cA4CP,KAAC,IAAD,4BAjDF,EAVD,CAgEEjD,OAAO,eACP,MAAC,SAAD,EAAW,SAAS,CAAC,aAArB,wBACC,KAAC,cAAD,EACC,IAAI,CAAC,MADN,CAEC,IAAI,CAAC,WAFN,CAGC,KAAK,CAAEE,QAHR,CAIC,QAAQ,CAAE,kBAACiC,CAAD,QAAOhC,CAAAA,WAAW,CAACgC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB,EAJX,CAKC,WAAW,CAAC,YALb,EADD,cAQC,eACC,SAAS,uBACRnC,QAAQ,GAAK,EAAb,CAAkB,aAAlB,CAAkC,EAD1B,CADV,CAIC,OAAO,CAAE+B,eAJV,CAKC,KAAK,CAAC,cALP,UAOEtB,QAAQ,cACR,YAAK,GAAG,CAAE/B,SAAV,CAAqB,GAAG,CAAC,MAAzB,EADQ,cAGR,YAAK,GAAG,CAAEC,SAAV,CAAqB,GAAG,CAAC,MAAzB,EAVF,EARD,GAjEF,GAlED,GADD,EADD,CAgKA,CAED,2BAAevB,IAAI,CAACyB,SAAD,CAAnB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState, useEffect, Fragment, memo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory, useParams, useLocation } from \"react-router-dom\";\n// import { getContacted, getMsgs } from '../../services/messageService';\nimport {\n\tclrMsging,\n\tgetContactedRdx,\n\tgetMsgsRdx,\n\tpostMsgRdx,\n} from \"../../reducers/messagingReducer\";\n// import FriendsCtn from '../FrndsCtn/FriendsCtn';\nimport Friend from \"../Friend/Friend\";\nimport Profile from \"../Profile/Profile\";\nimport Message from \"../Message/Message\";\nimport \"./messaging.css\";\nimport LoadingComp from \"../LoadingComp/LoadingComp\";\nimport FailureComp from \"../FailureComp/FailureComp\";\nimport { setNewChat } from \"../../reducers/fullScreenReducer\";\nimport { setStatusNotif } from \"../../reducers/statusNotifReducer\";\nimport { SecBgDiv } from \"../../styledComponents/SecBgDiv\";\nimport { PrimBgDiv } from \"../../styledComponents/PrimBgDiv\";\nimport { StyledInput } from \"../../styledComponents/StyledInput\";\nimport StyledNewChatLink from \"../../styledComponents/NewChatLink\";\nimport StyledMsgInput from \"../../styledComponents/StyledMsgInput\";\n\nimport sendBlack from \"../../assets/send-b.svg\";\nimport sendWhite from \"../../assets/send-w.svg\";\nimport { Text } from \"../../styledComponents/Text\";\n\nfunction Messaging() {\n\tconst dispatch = useDispatch();\n\tconst history = useHistory();\n\tconst params = useParams();\n\tconst location = useLocation();\n\tconst user = useSelector((state) => state.user);\n\n\tconst primCol = useSelector((state) => state.theme?.bgPrim);\n\t// const actionCol = useSelector(state => state.theme?.action);\n\n\tconst messagingState = useSelector((state) => state.messaging);\n\tconst failureState = useSelector(\n\t\t(state) => state.failure?.type === \"MSGING\",\n\t);\n\tconst [active, setActive] = useState([]);\n\tconst [curChat, setCurChat] = useState(null);\n\tconst [msgInput, setMsgInput] = useState(\"\");\n\n\tconst [filter, setFilter] = useState(\"\");\n\n\tconst [mobileSwitch, setMobileSwitch] = useState([0, window.screen.width]);\n\n\tconst [contrast, setContrast] = useState(false);\n\n\tuseEffect(() => {\n\t\tdispatch(getContactedRdx(user.token));\n\n\t\t// First path option indicates that the new chat menu was open when this component was mounting,\n\t\t// second indicates that the user had opened a brand new chat with a contact,\n\t\t// I indicate that to the user by appending new/{friend's username}, and I remove either of the\n\t\t// paths if it exists on a page reload\n\t\tif (location.pathname.includes(\"/new\" || \"new/\")) {\n\t\t\thistory.replace(\"/messages\", [location.pathname]);\n\t\t}\n\n\t\t// Setting active state variable to an array of falses with the length as the number of friends\n\t\t// the user has chatted with already\n\t\tif (messagingState?.contacted) {\n\t\t\tconst temp = [];\n\t\t\tfor (let i = 0; i < messagingState?.contacted.length; i++) {\n\t\t\t\ttemp.push(false);\n\t\t\t}\n\t\t\tsetActive([...temp]);\n\t\t}\n\n\t\treturn () => dispatch(clrMsging());\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (params.username && curChat?.username !== params.username) {\n\t\t\tif (messagingState?.contacted) {\n\t\t\t\tlet found = false;\n\t\t\t\tsetActive(\n\t\t\t\t\tmessagingState?.contacted.map((act, i) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!found &&\n\t\t\t\t\t\t\tparams.username ===\n\t\t\t\t\t\t\t\tmessagingState?.contacted[i].username\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsetCurChat(messagingState?.contacted[i]);\n\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\tgetMsgsRdx(\n\t\t\t\t\t\t\t\t\tuser.token,\n\t\t\t\t\t\t\t\t\tmessagingState?.contacted[i].u_id,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ti === messagingState.contacted.length - 1 &&\n\t\t\t\t\t\t\t\t!found\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\tsetStatusNotif(\n\t\t\t\t\t\t\t\t\t\t\"SET_ERR_NOTIF\",\n\t\t\t\t\t\t\t\t\t\t\"Couldn't find contact in your chat history or friends list\",\n\t\t\t\t\t\t\t\t\t\t3,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\thistory.replace(\"/messages\", null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (!params.username) {\n\t\t\tsetCurChat(null);\n\t\t\tsetActive([]);\n\t\t}\n\t}, [params, messagingState?.contacted]); // , curChat\n\n\tuseEffect(() => {\n\t\tif (window.screen.width < 768) {\n\t\t\tif (params.username) {\n\t\t\t\tsetMobileSwitch([-1 * window.screen.width, 0]);\n\t\t\t} else setMobileSwitch([0, window.screen.width]);\n\t\t}\n\t}, [params]);\n\n\tuseEffect(() => {\n\t\tfunction darkerIcons() {\n\t\t\tconst r = parseInt(primCol.substring(1, 3), 16);\n\t\t\tconst g = parseInt(primCol.substring(3, 5), 16);\n\t\t\tconst b = parseInt(primCol.substring(5, 7), 16);\n\n\t\t\treturn r * 0.299 + g * 0.587 + b * 0.114 > 100;\n\t\t}\n\t\tsetContrast(darkerIcons());\n\t\t// Calling this as a bug fix cause when the theme is changed i.e global state theme primCol changes,\n\t\t// the Navbar is triggered to rerender, but the classes on settingsToggleRef & settingsRef don't reset,\n\t\t// since the classLists on stored on useRefs which don't change across renders aka in this case\n\t\t// the classes on the Refs don't change since useRefs stay the same across rerenders\n\t\t// but the toggle box collapses since the display state on it comes from a state variable\n\t\t// which when the Navbar rerenders goes back to the default declaration state of display: none\n\t}, [primCol]);\n\n\tfunction handleMsgSubmit() {\n\t\tif (msgInput !== \"\") {\n\t\t\tdispatch(postMsgRdx(user.token, curChat.u_id, msgInput));\n\t\t\tsetMsgInput(\"\");\n\t\t}\n\t}\n\n\tif (failureState) {\n\t\treturn (\n\t\t\t<SecBgDiv className=\"dming-ctn-wrapper\">\n\t\t\t\t<PrimBgDiv className=\"dming-ctn\">\n\t\t\t\t\t<FailureComp />\n\t\t\t\t</PrimBgDiv>\n\t\t\t</SecBgDiv>\n\t\t);\n\t}\n\n\tif (!messagingState) {\n\t\treturn (\n\t\t\t<SecBgDiv className=\"dming-ctn-wrapper\">\n\t\t\t\t<PrimBgDiv className=\"dming-ctn\">\n\t\t\t\t\t<LoadingComp />\n\t\t\t\t</PrimBgDiv>\n\t\t\t</SecBgDiv>\n\t\t);\n\t}\n\n\tif (window.screen.width < 768) {\n\t\treturn (\n\t\t\t<SecBgDiv className=\"dming-ctn-wrapper\">\n\t\t\t\t<PrimBgDiv className=\"dming-ctn\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ left: mobileSwitch[0] }}\n\t\t\t\t\t\tclassName=\"frnds-ctn\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"new-chat\">\n\t\t\t\t\t\t\t<StyledNewChatLink\n\t\t\t\t\t\t\t\tto=\"/messages/new\"\n\t\t\t\t\t\t\t\tonClick={() => dispatch(setNewChat())}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tNew Chat\n\t\t\t\t\t\t\t</StyledNewChatLink>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<StyledInput\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={filter}\n\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\tsetFilter(e.target.value.toLowerCase())\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{filter !== \"\"\n\t\t\t\t\t\t\t? messagingState?.contacted.map((friend, i) => {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tfriend.name\n\t\t\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t\t\t.includes(filter) ||\n\t\t\t\t\t\t\t\t\t\tfriend.username\n\t\t\t\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t\t\t\t.includes(filter)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Friend\n\t\t\t\t\t\t\t\t\t\t\tkey={friend.u_id}\n\t\t\t\t\t\t\t\t\t\t\tactive={active[i]}\n\t\t\t\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\t\t\t\tactive[i]\n\t\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t\t: () =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thistory.push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`/messages/${friend.username}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tusername={friend.username}\n\t\t\t\t\t\t\t\t\t\t\tname={friend.name}\n\t\t\t\t\t\t\t\t\t\t\timgloc={friend.imgloc}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: messagingState?.contacted.map((friend, i) => (\n\t\t\t\t\t\t\t\t<Friend\n\t\t\t\t\t\t\t\t\tkey={friend.u_id}\n\t\t\t\t\t\t\t\t\tactive={active[i]}\n\t\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\t\tactive[i]\n\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t: () =>\n\t\t\t\t\t\t\t\t\t\t\t\thistory.push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`/messages/${friend.username}`,\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tusername={friend.username}\n\t\t\t\t\t\t\t\t\tname={friend.name}\n\t\t\t\t\t\t\t\t\timgloc={friend.imgloc}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t  ))}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div style={{ left: mobileSwitch[1] }} className=\"dm-ctn\">\n\t\t\t\t\t\t{curChat && (\n\t\t\t\t\t\t\t<div className=\"dm-ctn__prof\">\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc=\"/back-arrow.svg\"\n\t\t\t\t\t\t\t\t\talt=\"Back\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thistory.replace(\"/messages\", null)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<Profile\n\t\t\t\t\t\t\t\t\tname={curChat.name}\n\t\t\t\t\t\t\t\t\tusername={curChat.username}\n\t\t\t\t\t\t\t\t\tprofImgSrc={curChat.imgloc}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={`dms-ctn ${\n\t\t\t\t\t\t\t\tcurChat ? \"dms-ctn--active\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{curChat ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{messagingState?.messages.map(\n\t\t\t\t\t\t\t\t\t\t(message, i) =>\n\t\t\t\t\t\t\t\t\t\t\ti ===\n\t\t\t\t\t\t\t\t\t\t\tmessagingState.messages.length -\n\t\t\t\t\t\t\t\t\t\t\t\t1 ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Fragment key={message.msg_id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuId={user.uId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuIdFrom={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.u_id_from\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsgText={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.msg_text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime={message.time}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"dm-sction-date\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{message.date}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t) : messagingState.messages[i + 1]\n\t\t\t\t\t\t\t\t\t\t\t\t\t.date === message.date ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={message.msg_id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuId={user.uId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuIdFrom={message.u_id_from}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsgText={message.msg_text}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime={message.time}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Fragment key={message.msg_id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuId={user.uId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuIdFrom={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.u_id_from\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsgText={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.msg_text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime={message.time}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"dm-sction-date\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{message.date}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<p>Select a chat</p>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* </div> */}\n\n\t\t\t\t\t\t{curChat && (\n\t\t\t\t\t\t\t<PrimBgDiv className=\"dm-inpt-ctn\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"msg-input\"\n\t\t\t\t\t\t\t\t\tvalue={msgInput}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tsetMsgInput(e.target.value)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Message...\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName={`send-dm-btn ${\n\t\t\t\t\t\t\t\t\t\tmsgInput === \"\" ? \"dm-btn-disb\" : \"\"\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\tonClick={handleMsgSubmit}\n\t\t\t\t\t\t\t\t\ttitle=\"Send Message\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{contrast ? (\n\t\t\t\t\t\t\t\t\t\t<img src={sendBlack} alt=\"Send\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<img src={sendWhite} alt=\"Send\" />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</PrimBgDiv>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</PrimBgDiv>\n\t\t\t</SecBgDiv>\n\t\t);\n\t}\n\n\t// messagingState.messages.forEach(message => {\n\t//     const odate = new Date(message.date_time);\n\t//     console.log(odate.toString().split(\" \"));\n\t// });\n\n\t// function isSameDay(d1, d2) {\n\t//     return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n\t// }\n\treturn (\n\t\t<SecBgDiv className=\"dming-ctn-wrapper\">\n\t\t\t<PrimBgDiv className=\"dming-ctn\">\n\t\t\t\t<div className=\"frnds-ctn\">\n\t\t\t\t\t<div className=\"new-chat\">\n\t\t\t\t\t\t<StyledNewChatLink\n\t\t\t\t\t\t\tto=\"/messages/new\"\n\t\t\t\t\t\t\tonClick={() => dispatch(setNewChat())}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tNew Chat\n\t\t\t\t\t\t</StyledNewChatLink>\n\t\t\t\t\t</div>\n\t\t\t\t\t<StyledInput\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={filter}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\tsetFilter(e.target.value.toLowerCase())\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t/>\n\t\t\t\t\t{filter !== \"\"\n\t\t\t\t\t\t? messagingState?.contacted.map((friend, i) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tfriend.name\n\t\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t\t.includes(filter) ||\n\t\t\t\t\t\t\t\t\tfriend.username\n\t\t\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t\t\t.includes(filter)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Friend\n\t\t\t\t\t\t\t\t\t\tkey={friend.u_id}\n\t\t\t\t\t\t\t\t\t\tactive={active[i]}\n\t\t\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\t\t\tactive[i]\n\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t: () =>\n\t\t\t\t\t\t\t\t\t\t\t\t\thistory.push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`/messages/${friend.username}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tusername={friend.username}\n\t\t\t\t\t\t\t\t\t\tname={friend.name}\n\t\t\t\t\t\t\t\t\t\timgloc={friend.imgloc}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: messagingState?.contacted.map((friend, i) => (\n\t\t\t\t\t\t\t<Friend\n\t\t\t\t\t\t\t\tkey={friend.u_id}\n\t\t\t\t\t\t\t\tactive={active[i]}\n\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\tactive[i]\n\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t: () =>\n\t\t\t\t\t\t\t\t\t\t\thistory.push(\n\t\t\t\t\t\t\t\t\t\t\t\t`/messages/${friend.username}`,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tusername={friend.username}\n\t\t\t\t\t\t\t\tname={friend.name}\n\t\t\t\t\t\t\t\timgloc={friend.imgloc}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t  ))}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"dm-ctn\">\n\t\t\t\t\t{curChat && (\n\t\t\t\t\t\t<Profile\n\t\t\t\t\t\t\tname={curChat.name}\n\t\t\t\t\t\t\tusername={curChat.username}\n\t\t\t\t\t\t\tprofImgSrc={curChat.imgloc}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{/* <div className=\"dms-ctn-scroll-wrapper\"> */}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`dms-ctn ${\n\t\t\t\t\t\t\tcurChat ? \"dms-ctn--active\" : \"\"\n\t\t\t\t\t\t}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{curChat ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{messagingState?.messages.map((message, i) =>\n\t\t\t\t\t\t\t\t\ti === messagingState.messages.length - 1 ? (\n\t\t\t\t\t\t\t\t\t\t<Fragment key={message.msg_id}>\n\t\t\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\t\t\tuId={user.uId}\n\t\t\t\t\t\t\t\t\t\t\t\tuIdFrom={message.u_id_from}\n\t\t\t\t\t\t\t\t\t\t\t\tmsgText={message.msg_text}\n\t\t\t\t\t\t\t\t\t\t\t\ttime={message.time}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"dm-sction-date\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{message.date}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t) : messagingState.messages[i + 1].date ===\n\t\t\t\t\t\t\t\t\t  message.date ? (\n\t\t\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\t\t\tkey={message.msg_id}\n\t\t\t\t\t\t\t\t\t\t\t\tuId={user.uId}\n\t\t\t\t\t\t\t\t\t\t\t\tuIdFrom={message.u_id_from}\n\t\t\t\t\t\t\t\t\t\t\t\tmsgText={message.msg_text}\n\t\t\t\t\t\t\t\t\t\t\t\ttime={message.time}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Fragment key={message.msg_id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\t\t\t\tuId={user.uId}\n\t\t\t\t\t\t\t\t\t\t\t\t\tuIdFrom={message.u_id_from}\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgText={message.msg_text}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttime={message.time}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"dm-sction-date\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{message.date}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Text>Select a chat</Text>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* </div> */}\n\n\t\t\t\t\t{curChat && (\n\t\t\t\t\t\t<PrimBgDiv className=\"dm-inpt-ctn\">\n\t\t\t\t\t\t\t<StyledMsgInput\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"msg-input\"\n\t\t\t\t\t\t\t\tvalue={msgInput}\n\t\t\t\t\t\t\t\tonChange={(e) => setMsgInput(e.target.value)}\n\t\t\t\t\t\t\t\tplaceholder=\"Message...\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`send-dm-btn ${\n\t\t\t\t\t\t\t\t\tmsgInput === \"\" ? \"dm-btn-disb\" : \"\"\n\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\tonClick={handleMsgSubmit}\n\t\t\t\t\t\t\t\ttitle=\"Send Message\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{contrast ? (\n\t\t\t\t\t\t\t\t\t<img src={sendBlack} alt=\"Send\" />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<img src={sendWhite} alt=\"Send\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</PrimBgDiv>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</PrimBgDiv>\n\t\t</SecBgDiv>\n\t);\n}\n\nexport default memo(Messaging);\n\n//const contacted = useSelector(state => state.messaging?.contacted);\n//const messages = useSelector(state => state.messaging?.messages);\n// const [contacted, setContacted] = useState(null);\n// const [chatSectionDate, setChatSectionDate] = useState({ date: null, display: false });\n// const chatSectionDate = useRef({ date: null, display: false })\n// const [chatDateState, setChatDateState] = useState([]);\n// const chatSectionDateRef = useRef(null);\n\n// useEffect(() => {\n//     const temp = [];\n//     if (messagingState?.messages) {\n//         let dateCheck = null;\n//         for (let i = 0; i < messagingState.messages.length; i++) {\n//             let tempDate = new Date(messagingState.messages[i].date).toLocaleString(\"default\", {\n//                 dateStyle: \"full\"\n//             }).split(\" \").slice(1).join(\" \");\n//             if (tempDate !== dateCheck) {\n//                 temp.push(tempDate);\n//                 dateCheck = tempDate;\n//             };\n//             //console.log(tempDate, dateCheck);\n//         }\n//         //console.log(temp);\n//         setChatDateState([ ...temp ]);\n//     };\n\n// }, [messagingState?.messages]);\n\n// messagingState.messages[i].date === message.date ?\n\n//                                         <Message\n//                                         key={ message.msg_id }\n//                                         uId={ user.uId }\n//                                         message={ message }\n//                                         />\n\n//                                     :   <>\n//                                         {\n//                                             <p\n//                                             key={ message.msg_id+1 }\n//                                             className=\"dm-sction-date\">\n//                                                 { message.date }\n//                                             </p>\n//                                         }\n//                                             <Message\n//                                             key={ message.msg_id }\n//                                             uId={ user.uId }\n//                                             message={ message }\n//                                             />\n//                                         </>\n\n// messagingState?.messages.map((message, i) =>\n//     <>\n//         {\n//             chatSectionDate.display &&\n//                 <p key={i} className=\"dm-sction-date\">\n//                     { chatSectionDateRef.current }\n//                 </p>\n//         }\n//         <Message\n//         key={ message.msg_id }\n//         uId={ user.uId }\n//         message={ message }\n//         chatSectionDate={ chatSectionDate }\n//         setChatSectionDate={ setChatSectionDate }\n//         chatSectionDateRef={ chatSectionDateRef }\n//         />\n//     </>\n// )\n\n// chatDateState.map((chatDate, i) =>\n//                                 <>\n//                                     {\n//                                         <p key={i} className=\"dm-sction-date\">\n//                                             { chatDate }\n//                                         </p>\n//                                     }\n//                                     {\n//                                         messagingState?.messages.map(message =>\n//                                             <Message\n//                                             key={ message.msg_id }\n//                                             uId={ user.uId }\n//                                             message={ message }\n//                                             chatSectionDate={ chatSectionDate }\n//                                             setChatSectionDate={ setChatSectionDate }\n//                                             chatSectionDateRef={ chatSectionDateRef }\n//                                             />)\n//                                     }\n//                                 </>\n//                             )\n\n// function activeOnClick(fndUname) {\n//     setActive(messagingState?.contacted.map((act, i) => {\n//         if (fndUname === messagingState?.contacted[i].username) {\n//             setCurChat(messagingState?.contacted[i]);\n//             return true;\n//         } else {\n//             return false;\n//         };\n//     }));\n// };\n//console.log(messagingState);\n\n//console.log(messagingState?.messages);\n"]},"metadata":{},"sourceType":"module"}