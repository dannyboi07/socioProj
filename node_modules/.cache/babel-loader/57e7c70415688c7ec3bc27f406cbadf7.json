{"ast":null,"code":"import _slicedToArray from\"/home/runner/work/socioProj/socioProj/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{useHistory}from\"react-router-dom\";import{setFailure}from\"../../reducers/failureReducer\";import{addChat}from\"../../reducers/messagingReducer\";import{getContacts}from\"../../services/messageService\";import{PrimBgDiv}from\"../../styledComponents/PrimBgDiv\";import{StyledInput}from\"../../styledComponents/StyledInput\";import{Text}from\"../../styledComponents/Text\";import FailureComp from\"../FailureComp/FailureComp\";import Friend from\"../Friend/Friend\";import LoadingComp from\"../LoadingComp/LoadingComp\";import\"./newchat.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function NewChat(){var history=useHistory();var dispatch=useDispatch();var userToken=useSelector(function(state){return state.user.token;});var failureState=useSelector(function(state){var _state$failure;return((_state$failure=state.failure)===null||_state$failure===void 0?void 0:_state$failure.type)===\"NEW_CHAT\";});//const [err, setErr] = useState(false);\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),friends=_useState2[0],setFriends=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),filtered=_useState4[0],setFiltered=_useState4[1];useEffect(function(){if(userToken){getContacts(userToken).then(function(res){return setFriends(res);}).catch(function(err){console.error(err);dispatch(setFailure(\"NEW_CHAT\",null));});}},[]);function handleNewChatClick(friend){history.replace(\"/messages/new/\".concat(friend.username),null);dispatch(addChat(friend));}if(failureState){return/*#__PURE__*/_jsx(PrimBgDiv,{className:\"nw-chat-ctn\",children:/*#__PURE__*/_jsx(FailureComp,{})});}if(!friends){return/*#__PURE__*/_jsx(PrimBgDiv,{className:\"nw-chat-ctn\",children:/*#__PURE__*/_jsx(LoadingComp,{mini:true})});}// filtered !== \"\" ?\n//     friends.map(friend => friend.name.contains(filtered)\n//         || friend.username.contains(filtered) ?\n//             <Friend\n//             key={ friend.u_id }\n//             username={ friend.username }\n//             name={ friend.name }\n//             imgloc={ friend.imgloc }\n//             onClick={ () => handleNewChatClick(friend) }\n//             />\n//         :   null)\n// :   friends.length === 0 ?\n//         <p>\n//             No friends\n//         </p>\n//     :   friends.map(friend =>\n//             <Friend\n//             key={ friend.u_id }\n//             username={ friend.username }\n//             name={ friend.name }\n//             imgloc={ friend.imgloc }\n//             onClick={ () => handleNewChatClick(friend) }\n//             />\n//         )\nreturn/*#__PURE__*/_jsxs(PrimBgDiv,{className:\"nw-chat-ctn\",children:[/*#__PURE__*/_jsx(StyledInput,{type:\"text\",value:filtered,onChange:function onChange(e){return setFiltered(e.target.value.toLowerCase());},placeholder:\"Search...\"}),filtered!==\"\"?friends.map(function(friend){if(friend.name.toLowerCase().includes(filtered)||friend.username.toLowerCase().includes(filtered)){return/*#__PURE__*/_jsx(Friend,{username:friend.username,name:friend.name,imgloc:friend.imgloc,onClick:function onClick(){return handleNewChatClick(friend);}},friend.u_id);}}):friends.length===0?/*#__PURE__*/_jsx(Text,{children:\"No friends\"}):friends.map(function(friend){return/*#__PURE__*/_jsx(Friend,{username:friend.username,name:friend.name,imgloc:friend.imgloc,onClick:function onClick(){return handleNewChatClick(friend);}},friend.u_id);})]});}export default NewChat;// filtered !== \"\" ?\n// friends.map(friend => {\n// if (friend.name.contains(filtered) || friend.username.contains(filtered)) {\n//     return (\n//         <Friend key={ friend.u_id } username={ friend.username }\n//             name={ friend.name } imgloc={ friend.imgloc }\n//             onClick={ () => handleNewChatClick(friend) }\n//         />\n//     );\n// };\n// })\n// :   friends.length === 0 ?\n//     <p>\n//         No friends\n//     </p>\n// :   friends.map(friend =>\n//         <Friend\n//         key={ friend.u_id }\n//         username={ friend.username }\n//         name={ friend.name }\n//         imgloc={ friend.imgloc }\n//         onClick={ () => handleNewChatClick(friend) }\n//         />\n//     )","map":{"version":3,"sources":["/home/runner/work/socioProj/socioProj/src/components/NewChat/NewChat.js"],"names":["React","useState","useEffect","useSelector","useDispatch","useHistory","setFailure","addChat","getContacts","PrimBgDiv","StyledInput","Text","FailureComp","Friend","LoadingComp","NewChat","history","dispatch","userToken","state","user","token","failureState","failure","type","friends","setFriends","filtered","setFiltered","then","res","catch","err","console","error","handleNewChatClick","friend","replace","username","e","target","value","toLowerCase","map","name","includes","imgloc","u_id","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { setFailure } from \"../../reducers/failureReducer\";\nimport { addChat } from \"../../reducers/messagingReducer\";\nimport { getContacts } from \"../../services/messageService\";\nimport { PrimBgDiv } from \"../../styledComponents/PrimBgDiv\";\nimport { StyledInput } from \"../../styledComponents/StyledInput\";\nimport { Text } from \"../../styledComponents/Text\";\nimport FailureComp from \"../FailureComp/FailureComp\";\nimport Friend from \"../Friend/Friend\";\nimport LoadingComp from \"../LoadingComp/LoadingComp\";\nimport \"./newchat.css\";\n\nfunction NewChat() {\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\tconst userToken = useSelector(state => state.user.token);\n\tconst failureState = useSelector(state => state.failure?.type === \"NEW_CHAT\");\n\t//const [err, setErr] = useState(false);\n\tconst [friends, setFriends] = useState(null);\n\tconst [filtered, setFiltered] = useState(\"\");\n\n\tuseEffect(() => {\n\n\t\tif (userToken) {\n\t\t\tgetContacts(userToken)\n\t\t\t\t.then(res => setFriends(res))\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tdispatch(setFailure(\"NEW_CHAT\", null));\n\t\t\t\t});\n\t\t}\n\t}, []);\n\n\tfunction handleNewChatClick(friend) {\n\t\thistory.replace(`/messages/new/${friend.username}`, null);\n\t\tdispatch(addChat(friend));\n\t}\n\n\tif (failureState) {\n\t\treturn (\n\t\t\t<PrimBgDiv className=\"nw-chat-ctn\">\n\t\t\t\t<FailureComp />\n\t\t\t</PrimBgDiv>\n\t\t);\n\t}\n\n\tif (!friends) {\n\t\treturn (\n\t\t\t<PrimBgDiv className=\"nw-chat-ctn\">\n\t\t\t\t<LoadingComp mini={true} />\n\t\t\t</PrimBgDiv>\n\t\t);\n\t}\n\n\t// filtered !== \"\" ?\n\t//     friends.map(friend => friend.name.contains(filtered)\n\t//         || friend.username.contains(filtered) ?\n\t//             <Friend\n\t//             key={ friend.u_id }\n\t//             username={ friend.username }\n\t//             name={ friend.name }\n\t//             imgloc={ friend.imgloc }\n\t//             onClick={ () => handleNewChatClick(friend) }\n\t//             />\n\t//         :   null)\n\t// :   friends.length === 0 ?\n\t//         <p>\n\t//             No friends\n\t//         </p>\n\t//     :   friends.map(friend =>\n\t//             <Friend\n\t//             key={ friend.u_id }\n\t//             username={ friend.username }\n\t//             name={ friend.name }\n\t//             imgloc={ friend.imgloc }\n\t//             onClick={ () => handleNewChatClick(friend) }\n\t//             />\n\t//         )\n\n\treturn (\n\t\t<PrimBgDiv className=\"nw-chat-ctn\">\n\n\t\t\t<StyledInput type=\"text\"\n\t\t\t\tvalue={ filtered }\n\t\t\t\tonChange={ e => setFiltered(e.target.value.toLowerCase())}\n\t\t\t\tplaceholder=\"Search...\"\n\t\t\t/>\n\n\t\t\t{\n\t\t\t\tfiltered !== \"\" ?\n\t\t\t\t\tfriends.map(friend => {\n\t\t\t\t\t\tif (friend.name.toLowerCase().includes(filtered) || friend.username.toLowerCase().includes(filtered)) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Friend key={ friend.u_id } username={ friend.username }\n\t\t\t\t\t\t\t\t\tname={ friend.name } imgloc={ friend.imgloc }\n\t\t\t\t\t\t\t\t\tonClick={ () => handleNewChatClick(friend) }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t:   friends.length === 0 ?\n\t\t\t\t\t\t<Text>\n                            No friends\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t:   friends.map(friend =>\n\t\t\t\t\t\t\t<Friend\n\t\t\t\t\t\t\t\tkey={ friend.u_id }\n\t\t\t\t\t\t\t\tusername={ friend.username }\n\t\t\t\t\t\t\t\tname={ friend.name }\n\t\t\t\t\t\t\t\timgloc={ friend.imgloc }\n\t\t\t\t\t\t\t\tonClick={ () => handleNewChatClick(friend) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t}\n\t\t</PrimBgDiv>\n\t);\n}\n\nexport default NewChat;\n\n// filtered !== \"\" ?\n// friends.map(friend => {\n// if (friend.name.contains(filtered) || friend.username.contains(filtered)) {\n//     return (\n//         <Friend key={ friend.u_id } username={ friend.username }\n//             name={ friend.name } imgloc={ friend.imgloc }\n//             onClick={ () => handleNewChatClick(friend) }\n//         />\n//     );\n// };\n// })\n// :   friends.length === 0 ?\n//     <p>\n//         No friends\n//     </p>\n// :   friends.map(friend =>\n//         <Friend\n//         key={ friend.u_id }\n//         username={ friend.username }\n//         name={ friend.name }\n//         imgloc={ friend.imgloc }\n//         onClick={ () => handleNewChatClick(friend) }\n//         />\n//     )"]},"metadata":{},"sourceType":"module"}